name: Auto Version Tag

on:
  pull_request:
    branches:
      - develop
      - release
      - hotfix
      - master
      - feature
      - breaking
    types: [closed]

jobs:
  tag-version:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required to access full git history and tags

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Git identity
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Determine source and target branches
        id: branches
        run: |
          echo "source_branch=$(echo '${{ github.head_ref }}')" >> $GITHUB_OUTPUT
          echo "target_branch=$(echo '${{ github.base_ref }}')" >> $GITHUB_OUTPUT

      - name: Determine current and latest version
        id: version
        run: |
          last_tag=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)
          if [ -z "$last_tag" ]; then last_tag="v0.0.0"; fi
          echo "last_tag=$last_tag" >> $GITHUB_OUTPUT

          version=${last_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
          echo "major=$major" >> $GITHUB_OUTPUT
          echo "minor=$minor" >> $GITHUB_OUTPUT
          echo "patch=$patch" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: bump
        run: |
          source="${{ steps.branches.outputs.source_branch }}"
          target="${{ steps.branches.outputs.target_branch }}"
          major=${{ steps.version.outputs.major }}
          minor=${{ steps.version.outputs.minor }}
          patch=${{ steps.version.outputs.patch }}
          suffix=""

          echo "Source: $source"
          echo "Target: $target"

          case "$source->$target" in
            feat/*->feature)
              minor=$((minor + 1)); patch=0; suffix="-FEATURE" ;;
            break/*->breaking)
              minor=$((minor + 1)); patch=0; suffix="-BREAKING" ;;
            feature->develop)
              minor=$((minor + 1)); patch=0; suffix="-DEVELOP" ;;
            breaking->develop)
              major=$((major + 1)); minor=0; patch=0; suffix="-DEVELOP" ;;
            hotfix/*->hotfix)
              patch=$((patch + 1)); suffix="-HOTFIX" ;;
            develop->release)
              last_tag=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+-DEVELOP$' | head -n1)
              version=$(echo "$last_tag" | sed -E 's/^v(.*)-DEVELOP$/\1/')
              IFS='.' read -r major minor patch <<< "$version"
              suffix="-RELEASE" ;;
            release->master)
              last_tag=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+-RELEASE$' | head -n1)
              version=$(echo "$last_tag" | sed -E 's/^v(.*)-RELEASE$/\1/')
              IFS='.' read -r major minor patch <<< "$version" ;;
            hotfix->master)
              patch=$((patch + 1)) ;;
            bugfix/*->develop)
              echo "Skipping tag for bugfix/* -> develop"
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0 ;;
            *)
              echo "Unhandled branch flow: $source -> $target"
              exit 1 ;;
          esac

          new_version="$major.$minor.$patch$suffix"
          tag="v$new_version"
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Set version in pom.xml
        if: steps.bump.outputs.skip != 'true'
        run: mvn versions:set -DnewVersion=${{ steps.bump.outputs.version }} -DgenerateBackupPoms=false

      - name: Commit and tag
        if: steps.bump.outputs.skip != 'true'
        run: |
          git add pom.xml
          git commit -m " Bump version to ${{ steps.bump.outputs.version }}"
          git tag ${{ steps.bump.outputs.tag }}
          git push origin ${{ steps.bump.outputs.tag }}

      - name: Summary
        if: steps.bump.outputs.skip != 'true'
        run: echo " Tagged version-> ${{ steps.bump.outputs.tag }}"
